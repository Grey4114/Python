<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="5" hostname="ThanosGambit" name="pytest" skipped="0" tests="45" time="438.912" timestamp="2021-04-12T19:33:38.745455"><testcase classname="test_End_To_End.TestEndToEnd" file="test_End_To_End.py" line="56" name="test_RunAll" time="3.830"></testcase><testcase classname="test_End_To_End.TestPageAB" file="test_Page_AB.py" line="15" name="test_ab_control" time="7.165"></testcase><testcase classname="test_End_To_End.TestAddRemoveElements" file="test_Page_AddRemoveElements.py" line="14" name="test_add_remove" time="8.245"></testcase><testcase classname="test_End_To_End.TestBasicAuth" file="test_Page_BasicAuth.py" line="26" name="test_basic_auth" time="10.379"></testcase><testcase classname="test_End_To_End.TestBrokenImages" file="test_Page_BrokenImages.py" line="16" name="test_broken_images" time="11.189"></testcase><testcase classname="test_End_To_End.TestChallengingDOM" file="test_Page_ChallengingDOM.py" line="14" name="test_challenging_dom" time="6.777"></testcase><testcase classname="test_End_To_End.TestCheckboxes" file="test_Page_Checkboxes.py" line="14" name="test_checkboxes" time="6.288"></testcase><testcase classname="test_End_To_End.TestContextMenu" file="test_Page_ContextMenu.py" line="20" name="test_contex_menu" time="11.489"></testcase><testcase classname="test_End_To_End.TestDigestAuth" file="test_Page_DigestAuth.py" line="25" name="test_digest_auth" time="10.407"></testcase><testcase classname="test_End_To_End.TestDisappearingElements" file="test_Page_DisappearingElements.py" line="24" name="test_disappearing_elements" time="7.775"></testcase><testcase classname="test_End_To_End.TestDragDrop" file="test_Page_DragDrop.py" line="20" name="test_drag_and_drop" time="6.515"></testcase><testcase classname="test_End_To_End.TestDropdown" file="test_Page_DropDown.py" line="14" name="test_dropdown" time="12.028"></testcase><testcase classname="test_End_To_End.TestDynamicContent" file="test_Page_DynamicContent.py" line="14" name="test_dynamic_content" time="11.494"><failure message="AssertionError: assert &apos;https://the-internet.herokuapp.com/img/avatars/Original-Facebook-Geek-Profile-Avatar-6.jpg&apos; != &apos;https://the-internet.herokuapp.com/img/avatars/Original-Facebook-Geek-Profile-Avatar-6.jpg&apos;">self = &lt;tests.test_Page_DynamicContent.TestDynamicContent object at 0x000001EF02562FC8&gt;

    def test_dynamic_content(self):
        # Enter the Page
        log = self.getLogger()
        dynamicContent_page = DynamicContentPage(self.driver)
        dynamicContent_page.dynamicContent_LinkText().click()
    
    
        # Verify the Header
        header_text = dynamicContent_page.dynamicContent_HeaderText().text
        assert (&quot;Dynamic Content&quot; in header_text)
        log.info(&quot;Header: &quot; + header_text)
    
    
        # Verify the URL
        url = self.driver.current_url
        assert url == &quot;https://the-internet.herokuapp.com/dynamic_content&quot;
        log.info(&quot;URL: &quot; + url)
    
    
        # Verify the Header
        header_text = dynamicContent_page.dynamicContent_HeaderText().text
        assert (&quot;Dynamic Content&quot; in header_text)
        log.info(&quot;Header: &quot; + header_text)
    
    
        # Images Before click
        images_before = dynamicContent_page.dynamicContent_PageImages()
        before_I0 = images_before[0].get_attribute(&quot;src&quot;)
        before_I1 = images_before[1].get_attribute(&quot;src&quot;)
        before_I2 = images_before[2].get_attribute(&quot;src&quot;)
    
    
        # Text - Before click
        texts_before = dynamicContent_page.dynamicContent_PageTexts()
        before_T0 = texts_before[0].text
        before_T1 = texts_before[1].text
        before_T2 = texts_before[2].text
    
    
        # Refresh the page
        time.sleep(5)
        dynamicContent_page.dynamicContent_ClickHere().click()
        time.sleep(2)
    
    
        # Images After click
        images_after = dynamicContent_page.dynamicContent_PageImages()
        after_I0 = images_after[0].get_attribute(&quot;src&quot;)
        after_I1 = images_after[1].get_attribute(&quot;src&quot;)
        after_I2 = images_after[2].get_attribute(&quot;src&quot;)
    
    
        # Text After click
        texts_after = dynamicContent_page.dynamicContent_PageTexts()
        after_T0 = texts_after[0].text
        after_T1 = texts_after[1].text
        after_T2 = texts_after[2].text
    
    
        # Verify images
        assert before_I0 != after_I0
        assert before_I1 != after_I1
&gt;       assert before_I2 != after_I2
E       AssertionError: assert &apos;https://the-internet.herokuapp.com/img/avatars/Original-Facebook-Geek-Profile-Avatar-6.jpg&apos; != &apos;https://the-internet.herokuapp.com/img/avatars/Original-Facebook-Geek-Profile-Avatar-6.jpg&apos;

D:\GitHub\Python\Selenium\the_internet_herokuapp_website\tests\test_Page_DynamicContent.py:77: AssertionError</failure></testcase><testcase classname="test_End_To_End.TestDynamicControls" file="test_Page_DynamicControls.py" line="18" name="test_dynamic_controls" time="12.361"></testcase><testcase classname="test_End_To_End.TestDynamicLoading" file="test_Page_DynamicLoading.py" line="18" name="test_dynamic_loading" time="17.205"></testcase><testcase classname="test_End_To_End.TestEntryAd" file="test_Page_EntryAd.py" line="16" name="test_entry_ad" time="3.716"><failure message="assert False">self = &lt;tests.test_Page_EntryAd.TestEntryAd object at 0x000001EF02593C48&gt;

    def test_entry_ad(self):
        # Enter the Page
        log = self.getLogger()
        entryad_page = EntryAdPage(self.driver)
        entryad_page.entryAd_LinkText().click()
    
    
        # Verify the Header
        header_text = entryad_page.entryAd_HeaderText().text
        assert (&quot;Entry Ad&quot; in header_text)
        log.info(&quot;Header: &quot; + header_text)
    
    
        # Verify the URL
        url = self.driver.current_url
        assert url == &quot;https://the-internet.herokuapp.com/entry_ad&quot;
        log.info(&quot;URL: &quot; + url)
    
    
        # Verify Modal Window open and close
        modal = entryad_page.entryAd_ModalWindowState().is_displayed()
&gt;       assert modal    # verify open
E       assert False

D:\GitHub\Python\Selenium\the_internet_herokuapp_website\tests\test_Page_EntryAd.py:38: AssertionError</failure></testcase><testcase classname="test_End_To_End.TestExitIntent" file="test_Page_ExitIntent.py" line="21" name="test_exit_intent" time="6.433"></testcase><testcase classname="test_End_To_End.TestFileDownload" file="test_Page_FileDownload.py" line="17" name="test_file_download" time="10.928"><failure message="assert &apos;CCSF_PNG.png&apos; in [&apos;desktop.ini&apos;]
 +  where &apos;CCSF_PNG.png&apos; = &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;569fddcc620c076575ad3bdbb11d3a15&quot;, element=&quot;47ff15e9-65fc-433d-9ba8-099b809cb67a&quot;)&gt;.text">self = &lt;tests.test_Page_FileDownload.TestFileDownload object at 0x000001EF02593EC8&gt;

    def test_file_download(self):
        # Enter the Page
        log = self.getLogger()
        fileDownload_page = FileDownloadPage(self.driver)
        fileDownload_page.fileDownload_LinkText().click()
    
    
        # Verify the Header
        header_text = fileDownload_page.fileDownload_HeaderText().text
        assert (&quot;File Downloader&quot; in header_text)
        log.info(&quot;Header: &quot; + header_text)
    
    
        # Verify the URL
        url = self.driver.current_url
        assert url == &quot;https://the-internet.herokuapp.com/download&quot;
        log.info(&quot;URL: &quot; + url)
    
    
        # Verify - files downloaded
        filelist = fileDownload_page.fileDownload_FileList()
        for file in filelist:
            if &quot;.txt&quot; in file.text or &quot;.png&quot; in file.text:
                file.click()
                time.sleep(5)
                log.info(file.text)
                dir_list = os.listdir(&quot;C:/Users/chris_000/Downloads&quot;)
&gt;               assert file.text in dir_list
E               assert &apos;CCSF_PNG.png&apos; in [&apos;desktop.ini&apos;]
E                +  where &apos;CCSF_PNG.png&apos; = &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;569fddcc620c076575ad3bdbb11d3a15&quot;, element=&quot;47ff15e9-65fc-433d-9ba8-099b809cb67a&quot;)&gt;.text

D:\GitHub\Python\Selenium\the_internet_herokuapp_website\tests\test_Page_FileDownload.py:45: AssertionError</failure></testcase><testcase classname="test_End_To_End.TestFileUpload" file="test_Page_FileUpload.py" line="18" name="test_file_upload" time="12.845"></testcase><testcase classname="test_End_To_End.TestFloatingMenu" file="test_Page_FloatingMenu.py" line="16" name="test_floating_menu" time="6.147"></testcase><testcase classname="test_End_To_End.TestForgotPassword" file="test_Page_ForgotPassword.py" line="15" name="test_forgot_password" time="6.266"></testcase><testcase classname="test_End_To_End.TestFormAuth" file="test_Page_FormAuth.py" line="17" name="test_form_authorities" time="9.264"></testcase><testcase classname="test_End_To_End.TestFrames" file="test_Page_Frames.py" line="15" name="test_frames" time="6.539"></testcase><testcase classname="test_End_To_End.TestGeolocation" file="test_Page_Geolocation.py" line="14" name="test_geolocation" time="6.792"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;[id=&quot;lat-value&quot;]&quot;}
  (Session info: headless chrome=89.0.4389.114)">self = &lt;tests.test_Page_Geolocation.TestGeolocation object at 0x000001EF025E0A88&gt;

    def test_geolocation(self):
        # Enter the Page
        log = self.getLogger()
        geolocation_page = GeolocationPage(self.driver)
        geolocation_page.geolocation_LinkText().click()
    
    
        # Verify the Header
        header_text = geolocation_page.geolocation_HeaderText().text
        assert (&quot;Geolocation&quot; in header_text)
        log.info(&quot;Header: &quot; + header_text)
    
    
        # Verify the URL
        url = self.driver.current_url
        assert url == &quot;https://the-internet.herokuapp.com/geolocation&quot;
        log.info(&quot;URL: &quot; + url)
    
    
        # Verify button, latitiude and longtitude
        geolocation_page.geolocation_WhereAmI_Button().click()
        time.sleep(3)
&gt;       assert &quot;37&quot; in geolocation_page.geolocation_LatitudeText().text

D:\GitHub\Python\Selenium\the_internet_herokuapp_website\tests\test_Page_Geolocation.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
D:\GitHub\Python\Selenium\the_internet_herokuapp_website\pageObjects\GeolocationPage.py:34: in geolocation_LatitudeText
    return self.driver.find_element(*GeolocationPage.geo_Latitude)
c:\users\chris_000\appdata\local\programs\python\python37\lib\site-packages\selenium\webdriver\remote\webdriver.py:978: in find_element
    &apos;value&apos;: value})[&apos;value&apos;]
c:\users\chris_000\appdata\local\programs\python\python37\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EF025D7948&gt;
response = {&apos;status&apos;: 404, &apos;value&apos;: &apos;{&quot;value&quot;:{&quot;error&quot;:&quot;no such element&quot;,&quot;message&quot;:&quot;no such element: Unable to locate element: {\...\n\\tRtlGetAppContainerNamedObjectPath [0x76F97C7E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x76F97C4E+238]\\n&quot;}}&apos;}

    def check_response(self, response):
        &quot;&quot;&quot;
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        &quot;&quot;&quot;
        status = response.get(&apos;status&apos;, None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get(&quot;message&quot;, &quot;&quot;)
        screen = response.get(&quot;screen&quot;, &quot;&quot;)
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get(&apos;value&apos;, None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value[&apos;value&apos;]
                    status = value.get(&apos;error&apos;, None)
                    if status is None:
                        status = value[&quot;status&quot;]
                        message = value[&quot;value&quot;]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get(&apos;message&apos;)
                    else:
                        message = value.get(&apos;message&apos;, None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == &apos;&apos; or value is None:
            value = response[&apos;value&apos;]
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == &quot;&quot; and &apos;message&apos; in value:
            message = value[&apos;message&apos;]
    
        screen = None
        if &apos;screen&apos; in value:
            screen = value[&apos;screen&apos;]
    
        stacktrace = None
        if &apos;stackTrace&apos; in value and value[&apos;stackTrace&apos;]:
            stacktrace = []
            try:
                for frame in value[&apos;stackTrace&apos;]:
                    line = self._value_or_default(frame, &apos;lineNumber&apos;, &apos;&apos;)
                    file = self._value_or_default(frame, &apos;fileName&apos;, &apos;&lt;anonymous&gt;&apos;)
                    if line:
                        file = &quot;%s:%s&quot; % (file, line)
                    meth = self._value_or_default(frame, &apos;methodName&apos;, &apos;&lt;anonymous&gt;&apos;)
                    if &apos;className&apos; in frame:
                        meth = &quot;%s.%s&quot; % (frame[&apos;className&apos;], meth)
                    msg = &quot;    at %s (%s)&quot;
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if &apos;data&apos; in value:
                alert_text = value[&apos;data&apos;].get(&apos;text&apos;)
            elif &apos;alert&apos; in value:
                alert_text = value[&apos;alert&apos;].get(&apos;text&apos;)
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;[id=&quot;lat-value&quot;]&quot;}
E         (Session info: headless chrome=89.0.4389.114)

c:\users\chris_000\appdata\local\programs\python\python37\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: NoSuchElementException</failure></testcase><testcase classname="test_End_To_End.TestHorizontalSlider" file="test_Page_HorizontalSlider.py" line="15" name="test_horizontal_slider" time="8.099"></testcase><testcase classname="test_End_To_End.TestHovers" file="test_Page_Hovers.py" line="19" name="test_hovers" time="12.768"></testcase><testcase classname="test_End_To_End.TestInfiniteScroll" file="test_Page_InfiniteScroll.py" line="17" name="test_infinite_scroll" time="26.618"></testcase><testcase classname="test_End_To_End.TestInputs" file="test_Page_Inputs.py" line="15" name="test_inputs" time="12.351"></testcase><testcase classname="test_End_To_End.TestJQueryUIMenus" file="test_Page_JQueryUIMenus.py" line="16" name="test_jquery_ui_menus" time="16.738"></testcase><testcase classname="test_End_To_End.TestJavaScriptAlerts" file="test_Page_JavaScriptAlerts.py" line="13" name="test_java_script_alerts" time="31.086"></testcase><testcase classname="test_End_To_End.TestJavaScript_OnloadEventError" file="test_Page_JavaScriptOnloadEventError.py" line="15" name="test_java_script_onload_event_error" time="5.649"><failure message="AssertionError: assert &apos;404&apos; in &apos;https://298279967.log.optimizely.com/event?a=298279967&amp;d=298279967&amp;y=false&amp;n=https%3A%2F%2Fthe-internet.herokuapp.com...8964348942359623&amp;wxhr=true&amp;t=1618281543785&amp;f=298349752,318188263 - Failed to load resource: net::ERR_NAME_NOT_RESOLVED&apos;">self = &lt;tests.test_Page_JavaScriptOnloadEventError.TestJavaScript_OnloadEventError object at 0x000001EF02742B08&gt;

    def test_java_script_onload_event_error(self):
        # Enter the Page
        log = self.getLogger()
        jsOnloadEventErro_page = JavaScriptOnloadEventErrorPage(self.driver)
        jsOnloadEventErro_page.js_onloadEventError_LinkText().click()
    
    
        # Verify the URL
        url = self.driver.current_url
        assert url == &quot;https://the-internet.herokuapp.com/javascript_error&quot;
        log.info(&quot;URL: &quot; + url)
    
    
        # Get the logs and verify the error
        error_log = self.driver.get_log(&quot;browser&quot;)[0][&apos;message&apos;]
        log.info(error_log)
&gt;       assert &apos;404&apos; in error_log
E       AssertionError: assert &apos;404&apos; in &apos;https://298279967.log.optimizely.com/event?a=298279967&amp;d=298279967&amp;y=false&amp;n=https%3A%2F%2Fthe-internet.herokuapp.com...8964348942359623&amp;wxhr=true&amp;t=1618281543785&amp;f=298349752,318188263 - Failed to load resource: net::ERR_NAME_NOT_RESOLVED&apos;

D:\GitHub\Python\Selenium\the_internet_herokuapp_website\tests\test_Page_JavaScriptOnloadEventError.py:32: AssertionError</failure></testcase><testcase classname="test_End_To_End.TestKeyPresses" file="test_Page_KeyPresses.py" line="13" name="test_key_presses" time="8.395"></testcase><testcase classname="test_End_To_End.TestLargeDeepDOM" file="test_Page_LargeDeepDOM.py" line="13" name="test_large_deep_dom" time="6.361"></testcase><testcase classname="test_End_To_End.TestMultipleWindows" file="test_Page_MultipleWindows.py" line="13" name="test_multiple_windows" time="6.244"></testcase><testcase classname="test_End_To_End.TestNestedFrames" file="test_Page_NestedFrames.py" line="14" name="test_Nested_frames" time="7.922"></testcase><testcase classname="test_End_To_End.TestNotificationMessages" file="test_Page_NotificationMessages.py" line="13" name="test_notification_messages" time="8.863"></testcase><testcase classname="test_End_To_End.TestRedirectLink" file="test_Page_RedirectLink.py" line="13" name="test_redirect_link" time="7.957"></testcase><testcase classname="test_End_To_End.TestSecureFileDownload" file="test_Page_SecureFileDownload.py" line="20" name="test_secure_file_download" time="8.876"></testcase><testcase classname="test_End_To_End.TestShadowDOM" file="test_Page_ShadowDOM.py" line="13" name="test_shadow_dom" time="6.054"></testcase><testcase classname="test_End_To_End.TestShiftingContent" file="test_Page_ShiftingContent.py" line="14" name="test_shifting_content" time="10.848"></testcase><testcase classname="test_End_To_End.TestSlowResources" file="test_Page_SlowResources.py" line="16" name="test_slow_resources" time="5.760"></testcase><testcase classname="test_End_To_End.TestSortableDataTables" file="test_Page_SortableDataTables.py" line="16" name="test_Sortable_data_tables" time="7.427"></testcase><testcase classname="test_End_To_End.TestStatusCodes" file="test_Page_StatusCodes.py" line="14" name="test_status_codes" time="9.512"></testcase><testcase classname="test_End_To_End.TestTypos" file="test_Page_Typos.py" line="13" name="test_typos" time="10.787"></testcase><testcase classname="test_End_To_End.TestWYSIWYG_Editor" file="test_Page_WYSIWYG_Editor.py" line="16" name="test_wysiwyg_editor" time="6.839"></testcase></testsuite></testsuites>